#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 20 20:50:39 2022

@author: miguel
"""

import matplotlib.pyplot as plt
mapa3={
"Arad":{"nodes":["Zerind","Sibiu","Timisoara"],"coord":[67,133]},
"Zerind":{"nodes":["Oradea","Arad"],"coord":[92,80]},
"Oradea":{"nodes":["Zerind","Sibiu"],"coord":[122,25]},
"Timisoara":{"nodes":["Lugoj","Arad"],"coord":[72,245]},
"Lugoj":{"nodes":["Timisoara","Mehadia"],"coord":[168,287]},
"Dobreta":{"nodes":["Mehadia","Craiova"],"coord":[169,395]},
"Mehadia":{"nodes":["Lugoj","Dobreta"],"coord":[173,340]},
"Sibiu":{"nodes":["Arad","Oradea","Rimnicu Vilcea","Fagaras"],"coord":[227,181]},
"Fagaras":{"nodes":["Sibiu","Bucharest"],"coord":[362,191]},
"Rimnicu Vilcea":{"nodes":["Sibiu","Pitesti","Craiova"],"coord":[261,244]},
"Craiova":{"nodes":["Pitesti","Rimnicu Vilcea","Dobreta"],"coord":[287,410]},
"Pitesti":{"nodes":["Rimnicu Vilcea","Craiova","Bucharest"],"coord":[381,302]},
"Bucharest":{"nodes":["Fagaras","Pitesti","Giurgiu","Urziceni"],"coord":[488,356]},
"Urziceni":{"nodes":["Bucharest","Hirsova","Vaslui"],"coord":[565,325]},
"Vaslui":{"nodes":["Urziceni","Iasi"],"coord":[636,197]},
"Iasi":{"nodes":["Neamt","Vaslui"],"coord":[587,114]},
"Neamt":{"nodes":["Iasi"],"coord":[495,71]},
"Hirsova":{"nodes":["Urziceni","Eforie"],"coord":[669,326]},
"Eforie":{"nodes":["Hirsova"],"coord":[707,402]},
"Giurgiu":{"nodes":["Bucharest"],"coord":[453,433]}
}

ciudades = [[],[],[]]
caminos = [[[],[]]]

# Lines on top of scatter
plt.figure()
plt.subplot(211)

# Obtiene las coordenadas de las ciudades
for ciudad in mapa3:
    coordenada = mapa3[ciudad]['coord']
    ciudades[0].append(coordenada[0])
    ciudades[1].append(795-coordenada[1])
    ciudades[2].append(ciudad)

plot = plt.scatter(ciudades[0], ciudades[1],zorder=1000, s=40, color='black')   

# Genera las conexiones entre ciudades
for ciudad in mapa3:
    vecinos = mapa3[ciudad]['nodes']
    i_ciudad = ciudades[2].index(ciudad)
    x0 = ciudades[0][i_ciudad]
    y0 = ciudades[1][i_ciudad]
    
    plt.text(x0, y0, ciudades[2][i_ciudad])
    
    for nodo in vecinos:
        i_nodo = ciudades[2].index(nodo)
        x1 = ciudades[0][i_nodo]
        y1 = ciudades[1][i_nodo]
        
        if ([[x0,x1],[y0,y1]] not in caminos or 
            [[x1,x0],[y1,y0]] not in caminos):
            caminos.append([[x0,x1],[y0,y1]])
            print([[x0,x1],[y0,y1]])
            plt.plot([x0,x1], [y0,y1], 'r', lw=1, color='grey')


plt.axis('off')
plt.title('Mapa')